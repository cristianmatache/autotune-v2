from typing import Any, List
import pickle
import matplotlib.pyplot as plt
import torch

PATH = 'D:/datasets/output/arm10/loss_progress.model.pth'
BEST_LOSS_FUNCTIONS_PATH = '../../loss_functions/loss_functions_from_arm.pkl'


def unpickle(path: str) -> Any:
    with open(path, "rb") as f:
        return pickle.load(f)


def distinct(l: List[List[Any]]) -> List[List[Any]]:
    return [list(x) for x in set(tuple(x) for x in l)]


if __name__ == '__main__':
    N = 200
    # res = torch.load(PATH)
    res = unpickle(BEST_LOSS_FUNCTIONS_PATH)
    for _, v in res.items():
        # print(len(v))
        if len(v) > N:
            plt.plot(list(range(len(v[1:]))), v[1:])
    plt.show()
    print(len([1 for _, v in res.items() if len(v) > N]))
    print(sorted([(v[-1], len(v)) for _, v in res.items()], key=lambda x: x[0]))


# HB (0.10529999999999995, 292), (0.10670000000000002, 292), (0.10819999999999996, 292), (0.10970000000000002, 292)
# NONE (0.10440000000000005, 292), (0.11229999999999996, 247), (0.11560000000000004, 103)
# SURV (0.119, 292), (0.12170000000000003, 103), (0.12250000000000005, 292), (0.12309999999999999, 103),
#      (0.12450000000000006, 292),





# RESULTS CIFAR
# err_none = sorted([lf[-1] for k, lf in none.items() if len(lf) >= 290])
# err_none
# [0.10440000000000005, 0.1069, 0.11639999999999995, 0.1169, 0.12209999999999999, 0.12260000000000004, 0.12570000000000003, 0.12680000000000002]
# 
# err_surv = sorted([lf[-1] for k, lf in surv.items() if len(lf) >= 290])
# err_surv
# [0.10350000000000004, 0.10909999999999997, 0.10999999999999999, 0.11029999999999995, 0.11040000000000005, 0.11409999999999998, 0.1159, 0.119, 0.12250000000000005, 0.12390000000000001, 0.12450000000000006]
# 
# 
# from typing import List, Any
# def distinct(l: List[List[Any]]) -> List[List[Any]]:
# ...     return [list(x) for x in set(tuple(x) for x in l)]
# ...
# err_hb = sorted([lf[289] for lf in distinct([lf for k, v in hb.items() for lf in v])])
# err_hb
# [0.10409999999999997, 0.1058, 0.10599999999999998, 0.10609999999999997, 0.1078, 0.10840000000000005, 0.10870000000000002, 0.10940000000000005, 0.10950000000000004, 0.11060000000000003, 0.11080000000000001, 0.11119999999999997, 0.11160000000000003, 0.11209999999999998, 0.11229999999999996, 0.11319999999999997, 0.11350000000000005, 0.11360000000000003, 0.11409999999999998, 0.11529999999999996, 0.11539999999999995, 0.11539999999999995, 0.11570000000000003, 0.11580000000000001, 0.11660000000000004, 0.1169, 0.11699999999999999, 0.11719999999999997, 0.11770000000000003, 0.1179, 0.11929999999999996, 0.11950000000000005, 0.1199, 0.1199, 0.12029999999999996, 0.12039999999999995, 0.12070000000000003, 0.12129999999999996, 0.12170000000000003, 0.12280000000000002, 0.12280000000000002, 0.12419999999999998, 0.12460000000000004, 0.12470000000000003, 0.12490000000000001, 0.12490000000000001, 0.12529999999999997, 0.12660000000000005, 0.1269, 0.12870000000000004, 0.1291, 0.12990000000000002, 0.13649999999999995, 0.14390000000000003, 0.14649999999999996, 0.14800000000000002, 0.14980000000000004, 0.15259999999999996]
# 
# 
# len(err_none)
# 8
# len(err_surv)
# 11
# import numpy as np
# np.mean(err_none)
# 0.11772500000000001
# np.mean(err_surv)
# 0.11483636363636364
# np.mean(err_hb)
# 0.12009310344827585
# 
# 

# err_hb
# [0.10409999999999997, 0.1058, 0.10599999999999998, 0.10609999999999997, 0.1078, 0.10840000000000005, 0.10870000000000002, 0.10940000000000005, 0.10950000000000004, 0.11060000000000003, 0.11080000000000001, 0.11119999999999997, 0.11160000000000003, 0.11209999999999998, 0.11229999999999996, 0.11319999999999997, 0.11350000000000005, 0.11360000000000003, 0.11409999999999998, 0.11529999999999996, 0.11539999999999995, 0.11539999999999995, 0.11570000000000003, 0.11580000000000001, 0.11660000000000004, 0.1169, 0.11699999999999999, 0.11719999999999997, 0.11770000000000003, 0.1179, 0.11929999999999996, 0.11950000000000005, 0.1199, 0.1199, 0.12029999999999996, 0.12039999999999995, 0.12070000000000003, 0.12129999999999996, 0.12170000000000003, 0.12280000000000002, 0.12280000000000002, 0.12419999999999998, 0.12460000000000004, 0.12470000000000003, 0.12490000000000001, 0.12490000000000001, 0.12529999999999997, 0.12660000000000005, 0.1269, 0.12870000000000004, 0.1291, 0.12990000000000002, 0.13649999999999995, 0.14390000000000003, 0.14649999999999996, 0.14800000000000002, 0.14980000000000004, 0.15259999999999996]
# 
# err_none
# [0.10440000000000005, 0.1069, 0.11639999999999995, 0.1169, 0.12209999999999999, 0.12260000000000004, 0.12570000000000003, 0.12680000000000002]
# 
# err_surv
# [0.10350000000000004, 0.10909999999999997, 0.10999999999999999, 0.11029999999999995, 0.11040000000000005, 0.11409999999999998, 0.1159, 0.119, 0.12250000000000005, 0.12390000000000001, 0.12450000000000006]
# 
# 
# np.mean(err_hb)
# 0.12009310344827585
# np.mean(err_none)
# 0.11772500000000001
# np.mean(err_surv)
# 0.11483636363636364
# 
